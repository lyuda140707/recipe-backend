from fastapi import FastAPI, Request
import requests
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import os
import json
import gspread
import httpx
import random
import re
from collections import defaultdict
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from telegram_bot import bot, dp
from aiogram.types import Update
from wayforpay import generate_wayforpay_payment


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

    

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI()

# –î–æ–¥–∞—î–º–æ CORS ‚Äî –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ –¥–ª—è WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –º–æ–∂–µ—à –≤–∫–∞–∑–∞—Ç–∏ —Ç–æ—á–Ω–∏–π –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ CORS-–∑–∞–ø–∏—Ç–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑ Google Sheets
with open('/etc/secrets/credentials.json', 'r') as f:
    credentials_info = json.load(f)

credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_info, [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
])
client = gspread.authorize(credentials)
spreadsheet = client.open_by_url('https://docs.google.com/spreadsheets/d/1zJOrLr_uNCL0_F7Qcrgwg_K0YCSEy9ISoWX_ZUDuSYg/edit')
worksheet = spreadsheet.sheet1




# Webhook Telegram
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook("https://recipe-backend-0gz1.onrender.com/webhook")
    print("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


@app.post("/webhook")
async def webhook_handler(request: Request):
    data = await request.json()
    telegram_update = Update(**data)
    print("‚úÖ –Ø –æ–Ω–æ–≤–ª–µ–Ω–∏–π!")
    await dp.process_update(telegram_update)
    return {"ok": True}

# –ï–Ω–¥–ø–æ—ñ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
@app.get("/create-payment")
def create_payment(user_id: int):
    payment_data = generate_wayforpay_payment(user_id)
    return payment_data

# –ü—ñ–Ω–≥
@app.get("/ping")
async def ping():
    return {"pong": True}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤
def load_all_recipes():
    return worksheet.get_all_records()

def clean_category(raw: str):
    return re.sub(r'[^\w\s]', '', raw).strip().lower()

@app.get("/recipes")
async def get_recipes(request: Request):
    all_recipes = load_all_recipes()
    category = request.query_params.get("category")

    if category:
        clean_input = clean_category(category)
        return [
            r for r in all_recipes
            if clean_category(r.get("–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "")) == clean_input
        ]
    return all_recipes

@app.get("/weekly-menu")
async def generate_weekly_menu():
    categories = {
        "–ü–Ω": "ü•ò –î—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏",
        "–í—Ç": "ü•™ –ó–∞–∫—É—Å–∫–∏",
        "–°—Ä": "üçû –í–∏–ø—ñ—á–∫–∞",
        "–ß—Ç": "üç≤ –ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏",
        "–ü—Ç": "üç∞ –î–µ—Å–µ—Ä—Ç–∏",
        "–°–±": "ü•§ –ù–∞–ø–æ—ó",
        "–ù–¥": "ü•ó –°–∞–ª–∞—Ç–∏"
    }

    data = load_all_recipes()
    menu = {}

    for day, category in categories.items():
        filtered = [row for row in data if clean_category(row.get("–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "")) == clean_category(category)]
        grouped = defaultdict(list)
        for row in filtered:
            grouped[row["–Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç—É"]].append(row)

        if grouped:
            chosen_number = random.choice(list(grouped.keys()))
            menu[day] = grouped[chosen_number]
        else:
            menu[day] = []

    return menu

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É (–∫–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–≤")
class PaymentNotification(BaseModel):
    name: str
    user_id: int
    username: str

@app.post("/notify-payment")
async def notify_payment(data: PaymentNotification):
    print("‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ:", data.dict())

    message = (
        f"üßæ –ó–∞–ø–∏—Ç –Ω–∞ PRO –¥–æ—Å—Ç—É–ø\n"
        f"üë§ –Ü–º º—è/–∫–∞—Ä—Ç–∫–∞: <b>{data.name}</b>\n"
        f"üÜî ID: <code>{data.user_id}</code>\n"
        f"üìõ Username: @{data.username or '–Ω–µ–º–∞—î'}\n\n"
        f"üëâ /ok {data.user_id}"
    )

    async with httpx.AsyncClient() as client:
        await client.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={
                "chat_id": ADMIN_CHAT_ID,
                "text": message,
                "parse_mode": "HTML"
            }
        )

    return {"status": "ok"}
from pro_utils import is_pro_user  # –î–æ–¥–∞–π —ñ–º–ø–æ—Ä—Ç

    




@app.get("/is-pro")
async def check_pro(request: Request):
    user_id = request.query_params.get("user_id")
    if not user_id:
        return {"is_pro": False}
    return is_pro_user(user_id)

